Alice and Bob continue their games with piles of stones.  There are a number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].  The objective of the game is to end with the most stones. 

Alice and Bob take turns, with Alice starting first.  Initially, M = 1.

On each player's turn, that player can take all the stones in the first X remaining piles, where 1 <= X <= 2M.  Then, we set M = max(M, X).

The game continues until all the stones have been taken.

Assuming Alice and Bob play optimally, return the maximum number of stones Alice can get.

 

Example 1:

Input: piles = [2,7,9,4,4]
Output: 10
Explanation:  If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 piles in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 piles in total. So we return 10 since it's larger. 
Example 2:

Input: piles = [1,2,3,4,5,100]
Output: 104


solution: 

recursion:  dp[index][step] = max ([index : index+step] + max from dp table[index, step])


dp table:
step | 1   2   3   4   5
-----|-------------------
index|
1    | 
     | 
2    |    
     |
3    |       
     |
4    |            8
     |
5    |            8    


test case: 
Input: piles = [2,7,9,4,4] 

player[0] =   9->      16    
player[1] = 8    ->15   

0. 2 +                                                             return 26-(2+)
1.     7 +                                         8 = 15  return 24-15=9 
0.         9 +                0 = 9   return 17-9=8 
1.             (4+4)=8 return 0
0.         9 + 4 +            0 = 13 return 17-13=4
1.                 (4) return 



0.     7 + 9 + 0 = 16            return 24-16=8
1.             (4+4)=8 return 0
0. 2 + 7 +                       0 = 9 return 26-9=17
           (9+4+4)=13 return 0         
               